[{"/Users/arjuna/Projects/Covid-Tracker/src/App.js":"1","/Users/arjuna/Projects/Covid-Tracker/src/components/Header/MainHeader.jsx":"2","/Users/arjuna/Projects/Covid-Tracker/src/components/Header/Navbar.jsx":"3","/Users/arjuna/Projects/Covid-Tracker/src/components/Charts/MapChart.js":"4","/Users/arjuna/Projects/Covid-Tracker/src/components/Select/SelectConfig.js":"5","/Users/arjuna/Projects/Covid-Tracker/src/components/Charts/MapUtils.js":"6","/Users/arjuna/Projects/Covid-Tracker/src/config/dev.js":"7","/Users/arjuna/Projects/Covid-Tracker/src/components/Cards/Cards.jsx":"8","/Users/arjuna/Projects/Covid-Tracker/src/components/index.js":"9","/Users/arjuna/Projects/Covid-Tracker/src/index.js":"10","/Users/arjuna/Projects/Covid-Tracker/src/components/Dashboard.jsx":"11","/Users/arjuna/Projects/Covid-Tracker/src/components/Charts/DynamicChart.jsx":"12","/Users/arjuna/Projects/Covid-Tracker/src/components/Charts/ChartConfig.js":"13","/Users/arjuna/Projects/Covid-Tracker/src/api/index.js":"14","/Users/arjuna/Projects/Covid-Tracker/src/components/Select/SimpleSelect.jsx":"15","/Users/arjuna/Projects/Covid-Tracker/src/config/keys.js":"16","/Users/arjuna/Projects/Covid-Tracker/src/components/Charts/ChartFooter.jsx":"17","/Users/arjuna/Projects/Covid-Tracker/src/components/Footer/MainFooter.jsx":"18","/Users/arjuna/Projects/Covid-Tracker/src/components/Charts/SampleChart.jsx":"19","/Users/arjuna/Projects/Covid-Tracker/src/components/Charts/utils.js":"20"},{"size":335,"mtime":1606960734216,"results":"21","hashOfConfig":"22"},{"size":204,"mtime":1605730491483,"results":"23","hashOfConfig":"22"},{"size":2132,"mtime":1607062096369,"results":"24","hashOfConfig":"22"},{"size":2064,"mtime":1606962388343,"results":"25","hashOfConfig":"22"},{"size":2547,"mtime":1607144903077,"results":"26","hashOfConfig":"22"},{"size":552,"mtime":1606893098643,"results":"27","hashOfConfig":"22"},{"size":2338,"mtime":1607128911104,"results":"28","hashOfConfig":"22"},{"size":2895,"mtime":1588809228252,"results":"29","hashOfConfig":"22"},{"size":457,"mtime":1607068627190,"results":"30","hashOfConfig":"22"},{"size":233,"mtime":1606274982072,"results":"31","hashOfConfig":"22"},{"size":802,"mtime":1607145447605,"results":"32","hashOfConfig":"22"},{"size":3381,"mtime":1607139178777,"results":"33","hashOfConfig":"22"},{"size":4563,"mtime":1607050027846,"results":"34","hashOfConfig":"22"},{"size":14907,"mtime":1607151226795,"results":"35","hashOfConfig":"22"},{"size":1644,"mtime":1607050161995,"results":"36","hashOfConfig":"22"},{"size":181,"mtime":1599006601153,"results":"37","hashOfConfig":"22"},{"size":842,"mtime":1606875113085,"results":"38","hashOfConfig":"22"},{"size":582,"mtime":1606876667285,"results":"39","hashOfConfig":"22"},{"size":1025,"mtime":1607152980607,"results":"40","hashOfConfig":"22"},{"size":1661,"mtime":1607149430195,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1svqulv",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"67"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/arjuna/Projects/Covid-Tracker/src/App.js",[],["89","90"],"/Users/arjuna/Projects/Covid-Tracker/src/components/Header/MainHeader.jsx",[],["91","92"],"/Users/arjuna/Projects/Covid-Tracker/src/components/Header/Navbar.jsx",[],"/Users/arjuna/Projects/Covid-Tracker/src/components/Charts/MapChart.js",["93"],"import React, { useState, useEffect } from 'react';\nimport ReactMapGl from 'react-map-gl';\nimport keys from '../../config/keys';\nimport { fetchMapGeoJSON } from '../../api';\nimport { generateLegend } from './MapUtils';\n// import 'mapbox-gl/dist/mapbox-gl.css';\nimport './Map.css';\nimport { isMobile } from 'react-device-detect';\n\nexport const MapChart = () => {\n  const [viewPort, setViewPort] = useState({\n    latitude: 37.7785262,\n    longitude: -122.421323,\n    zoom: 12,\n    width: isMobile ? '42vh' : '60vw',\n    height: isMobile ? '38vh' : '62vh',\n  });\n\n  const [data, setData] = useState({ features: [] });\n  const [settings, setSettings] = useState({\n    dragRotate: false,\n    scrollZoom: false,\n    touchZoom: false,\n    touchRotate: false,\n    keyboard: false,\n    doubleClickZoom: false})\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      const data = await fetchMapGeoJSON();\n      setData(data);\n    };\n\n    fetchAPI();\n  }, []);\n\n  console.log(data);\n\n  const zoomIn = () => {\n    setViewPort({ ...viewPort, zoom: viewPort.zoom + 0.5 });\n    console.log(viewPort.zoom);\n  };\n\n  const zoomOut = () => {\n    setViewPort({ ...viewPort, zoom: viewPort.zoom - 0.5 });\n    console.log(viewPort.zoom);\n  };\n\n  const mapSF = (\n    <>\n      <ReactMapGl\n        {...viewPort}\n        {...settings}\n        mapboxApiAccessToken={keys.MAPBOX_TOKEN}\n        onViewportChange={(nextViewport) => setViewPort(nextViewport)}\n        mapStyle='mapbox://styles/tmclennan/cke7mgp6i1l7g19nrtbpaubiq'\n        style={{ margin: 'auto' }}\n      >\n        <div className='button-box'>\n          <button className='zoom-btn' onClick={zoomIn}>\n            +\n          </button>\n          <button className='zoom-btn' onClick={zoomOut}>\n            -\n          </button>\n        </div>\n        <div className='map-overlay' id={window.innerWidth >= 600 ? 'legend': 'legend-mobile'}>\n          <h5 style={{ margin: '0 0 1em 0' }}>Cases per 10,000 residents:</h5>\n          {generateLegend()}\n        </div>\n      </ReactMapGl>\n    </>\n  );\n\n  return <>{mapSF}</>;\n};\n",["94","95"],"/Users/arjuna/Projects/Covid-Tracker/src/components/Select/SelectConfig.js",[],"/Users/arjuna/Projects/Covid-Tracker/src/components/Charts/MapUtils.js",[],"/Users/arjuna/Projects/Covid-Tracker/src/config/dev.js",[],"/Users/arjuna/Projects/Covid-Tracker/src/components/Cards/Cards.jsx",[],["96","97"],"/Users/arjuna/Projects/Covid-Tracker/src/components/index.js",[],"/Users/arjuna/Projects/Covid-Tracker/src/index.js",[],["98","99"],"/Users/arjuna/Projects/Covid-Tracker/src/components/Dashboard.jsx",[],"/Users/arjuna/Projects/Covid-Tracker/src/components/Charts/DynamicChart.jsx",["100","101","102","103"],"import React, { useState, useLayoutEffect } from 'react';\nimport { fetchData, fetchTitle } from './utils';\nimport {\n  dateRangeValues,\n  fetchSecondary,\n} from '../Select/SelectConfig';\nimport { MapChart } from './MapChart';\nimport { Line, Doughnut } from 'react-chartjs-2';\nimport { isMobile } from 'react-device-detect';\nimport styles from './DynamicChart.module.css';\nimport SimpleSelect from '../Select/SimpleSelect';\nimport { composeOptions, composeData, mobileOptions, desktopOptions} from './ChartConfig';\nimport Footer from './ChartFooter';\n\nconst DynamicChart = ({ category }) => {\n\n  //Chart data:\n  const [currentData, setCurrentData] = useState({});\n  const [totalData, setTotalData] = useState({});\n  const [chartType, setChartType] = useState('');\n  const [ date, setDate ] = useState('')\n  const [ source, setSource] = useState('')\n\n\n  //Input bar:\n  const [dayCount, setDayCount] = useState(90);\n  const [subCategory, setSubCategory] = useState('chart1');\n\n  useLayoutEffect(() => {\n    console.log('inside useffect main chart')\n    const fetchAPI = async () => {\n      const data = await fetchData(category);\n      if (category !== 'MAP_DATA') {parseData(data)}\n      else {\n        setChartType('map')\n      }\n      setDayCount(isMobile ? 30 : dayCount);\n    };\n\n    fetchAPI();\n  }, [subCategory, dayCount]);\n\n  const parseData = (data) => {\n    setTotalData(data);\n    console.log(data)\n    setSource(data.source);\n    setDate(data.date_recorded);\n    setCurrentData(data[subCategory]);\n    setChartType(data[subCategory].type);\n  };\n\n  const inputBar = currentData ? (\n    <>\n    <div className={styles.inputBar}>\n      <div className={styles.headerContainer}>\n        <h5>{fetchTitle(category)}</h5>\n      </div>\n      <div className={styles.dropdownContainer}>\n      {window.innerWidth >= 900 && chartType !== 'map' &&(\n        <SimpleSelect\n          action={(event) => {\n            setSubCategory(event);\n            setCurrentData(totalData[event]);\n          }}\n          heading='Visualization'\n          values={fetchSecondary(category)}\n          newValue={subCategory}\n        />\n      )}\n      {window.innerWidth >= 900 && chartType !== 'map' &&(\n        <SimpleSelect\n          action={setDayCount}\n          heading='Date Range'\n          values={dateRangeValues}\n          defaultValue={30}\n        />\n      )}\n      </div>\n    </div>\n    </>\n  ) : null;\n\n\n  const dynamicChart =\n    (chartType === 'average' ||\n      chartType === 'line' ||\n      chartType === 'stacked') &&\n    currentData ? (\n      <Line\n        data={composeData(currentData, dayCount)}\n        options={composeOptions(currentData, dayCount)}\n      />\n    ) : null;\n\n  const doughnutChart = currentData ? (\n    <Doughnut\n      data={currentData.primary}\n      options={isMobile ? mobileOptions : desktopOptions}\n    />\n  ) : null;\n\n  return (\n    <div className={chartType === 'map' ? `${styles.map} ${styles.container}`: styles.container}>\n      \n      {inputBar}\n      <div className={styles.chartContainer}> \n        {chartType === 'map' && <MapChart />}\n        {(chartType === 'average' ||\n          chartType === 'line' ||\n          chartType === 'stacked') &&\n          dynamicChart}\n        {chartType === 'doughnut' && doughnutChart}\n        {/* {!isMobile && <Footer date={date} source={source}/>} */}\n      </div>\n    </div>\n  ) \n};\n\nexport default DynamicChart;\n","/Users/arjuna/Projects/Covid-Tracker/src/components/Charts/ChartConfig.js",[],"/Users/arjuna/Projects/Covid-Tracker/src/api/index.js",[],"/Users/arjuna/Projects/Covid-Tracker/src/components/Select/SimpleSelect.jsx",[],"/Users/arjuna/Projects/Covid-Tracker/src/config/keys.js",[],"/Users/arjuna/Projects/Covid-Tracker/src/components/Charts/ChartFooter.jsx",[],"/Users/arjuna/Projects/Covid-Tracker/src/components/Footer/MainFooter.jsx",[],"/Users/arjuna/Projects/Covid-Tracker/src/components/Charts/SampleChart.jsx",[],"/Users/arjuna/Projects/Covid-Tracker/src/components/Charts/utils.js",[],{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"104","replacedBy":"108"},{"ruleId":"106","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":20,"column":20,"nodeType":"112","messageId":"113","endLine":20,"endColumn":31},{"ruleId":"104","replacedBy":"114"},{"ruleId":"106","replacedBy":"115"},{"ruleId":"104","replacedBy":"116"},{"ruleId":"106","replacedBy":"117"},{"ruleId":"104","replacedBy":"118"},{"ruleId":"106","replacedBy":"119"},{"ruleId":"110","severity":1,"message":"120","line":13,"column":8,"nodeType":"112","messageId":"113","endLine":13,"endColumn":14},{"ruleId":"110","severity":1,"message":"121","line":21,"column":11,"nodeType":"112","messageId":"113","endLine":21,"endColumn":15},{"ruleId":"110","severity":1,"message":"122","line":22,"column":11,"nodeType":"112","messageId":"113","endLine":22,"endColumn":17},{"ruleId":"123","severity":1,"message":"124","line":41,"column":6,"nodeType":"125","endLine":41,"endColumn":29,"suggestions":"126"},"no-native-reassign",["127"],"no-negated-in-lhs",["128"],["127"],["128"],"no-unused-vars","'setSettings' is assigned a value but never used.","Identifier","unusedVar",["127"],["128"],["127"],["128"],["127"],["128"],"'Footer' is defined but never used.","'date' is assigned a value but never used.","'source' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useLayoutEffect has missing dependencies: 'category' and 'parseData'. Either include them or remove the dependency array.","ArrayExpression",["129"],"no-global-assign","no-unsafe-negation",{"desc":"130","fix":"131"},"Update the dependencies array to be: [subCategory, dayCount, category, parseData]",{"range":"132","text":"133"},[1302,1325],"[subCategory, dayCount, category, parseData]"]